@using System.ComponentModel.DataAnnotations

<div class="demo-description">
    <h2>Form Layout Validation</h2>
    <p>
        Our <b>DxFormLayout</b> component allows you to easily construct responsive and automatically-aligned edit forms.
        The standard <b>EditForm</b> component enables data validation.
        This demo shows how you can use the two components together.
    </p>
    <p>
        Inside the <b>EditForm</b>, the code adds a <b>DxFormLayout</b> component with four <b>DxFormLayoutItem</b> entries. Each layout items contains a DevExpress Data Editor:
    </p>
    <ul>
        <li>DxTextBox</li>
        <li>DxComboBox</li>
        <li>DxSpinEdit</li>
        <li>DxDateEdit</li>
    </ul>
    <p>
        As in the previous demo, once you attempt to submit changes, editors become marked with colored outlines.
        <span class="invalid" style="color:red;">Red</span> indicates invalid values, while <span class="modified" style="outline: 1px solid #26b050; color:#26b050;">green</span> indicates values that were posted successfully.
    </p>
    <p>
        Bellow the form the standard Blazor <b>ValidationSummary</b> component displayes the validation summarizy.
    </p>
</div>

<div class="card demo-card-wide">
    <div class="card-header">@FormValidationState</div>
    <div class="card-body">
        <EditForm Model="@starship" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit" Context="EditFormContext">
            <DataAnnotationsValidator />
            <DxFormLayout>
                <DxFormLayoutItem Caption="Identifier:" ColSpanMd="6">
                    <Template>
                        <DxTextBox @bind-Text=@starship.Identifier />
                        @*<ValidationMessage For="@(() => starship.Identifier)" />*@
                    </Template>
                </DxFormLayoutItem>

                <DxFormLayoutItem Caption="Primary Classification:" ColSpanMd="6">
                    <Template>
                        <DxComboBox NullText="Select classification ..."
                                    Data=@(new List<string>() { null, "Defense", "Exploration", "Diplomacy" })
                                    @bind-SelectedItem=@starship.Classification />
                        @*<ValidationMessage For="@(() => starship.Classification)" />*@
                    </Template>
                </DxFormLayoutItem>

                <DxFormLayoutItem Caption="Maximum Accommodation:" ColSpanMd="6">
                    <Template>
                        <DxSpinEdit Id="accommodation" @bind-Value=@starship.MaximumAccommodation />
                        @*<ValidationMessage For="@(() => starship.MaximumAccommodation)" />*@
                    </Template>
                </DxFormLayoutItem>

                <DxFormLayoutItem Caption="Production Date:" ColSpanMd="6">
                    <Template>
                        <DxDateEdit @bind-Date=@starship.ProductionDate />
                        @*<ValidationMessage For="@(() => starship.ProductionDate)" />*@
                    </Template>
                </DxFormLayoutItem>

                <DxFormLayoutItem ColSpanMd="12">
                    <Template>
                        <button type="submit">Submit</button>
                    </Template>
                </DxFormLayoutItem>

                <DxFormLayoutItem ColSpanMd="12">
                    <Template>
                        <ValidationSummary />
                    </Template>
                </DxFormLayoutItem>

            </DxFormLayout>

        </EditForm>
    </div>
</div>

<div class="code-snippet card demo-card-wide">
    <CodeSnippetHeader></CodeSnippetHeader>
    <div class="card-footer text-muted ">
        <CodeSnippet_FormValidation_FormLayout />
    </div>
</div>

@code {
    string FormValidationState = @"Press the ""Submit"" button to validate the form.";
    private Starship starship = new Starship() { ProductionDate = DateTime.Now + TimeSpan.FromDays(1) };

    private void HandleValidSubmit()
    {
        FormValidationState = @"Form is valid";
    }
    private void HandleInvalidSubmit()
    {
        FormValidationState = @"Form is invalid";
    }

    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Parameter, AllowMultiple = false)]
    public class DateInPastAttribute: ValidationAttribute
    {
        public override bool IsValid(object value)
        {
            return (DateTime)value <= DateTime.Today;
        }
    }

    public class Starship
    {
        [Required]
        [StringLength(16,
        ErrorMessage = "Identifier too long (16 character limit).")]
        public string Identifier { get; set; }

        [Required]
        public string Classification { get; set; }

        [Range(1, 100000, ErrorMessage = "Accommodation invalid (1-100000).")]
        public int MaximumAccommodation { get; set; }

        [Required]
        [DateInPastAttribute(ErrorMessage = "Date should be in past.")]
        public DateTime ProductionDate { get; set; }
    }
}
