@using Demo.Blazor.Model

<div class="demo-description">
    <h2>ComboBox - Allow Input</h2>
    <p>
        The <b>AllowUserInput</b> property specifies whether users are allowed to input values into an editor's edit box. The following property values are available:
    </p>
    <ul>
        <li><b>true</b> - A user can either select an item from the drop-down list or enter new values into the edit box (without the need to invoke the drop-down list).</li>
        <li><b>false</b> - A user can only select an item from the drop-down list.</li>
    </ul>
    <p>
        In this demo, the <b>AllowUserInput</b> property is set to true.
    </p>
</div>

<div class="card demo-card">
    <div class="card-header">Text = "<b>@(Text)</b>", SelectedItem = <b>@(SelectedItem == null ? "Null" : SelectedItem)</b></div>
    <div class="card-body mw-480" style="height: 180px">
        <DxComboBox Data="@Cities"
                    AllowUserInput="@true"
                    NullText="Select City ..."
                    @bind-SelectedItem="@SelectedItem"
                    @bind-Text="@Text"
                    @bind-DropDownVisible="@DropDownVisible">
        </DxComboBox>
    </div>
</div>

<div class="code-snippet card demo-card-wide">
        <CodeSnippetHeader></CodeSnippetHeader>
        <div class="card-footer text-muted">
            <CodeSnippet_Editors_ComboBox_AllowUserInput></CodeSnippet_Editors_ComboBox_AllowUserInput>
        </div>
    </div>

@code {
    IEnumerable<string> Cities = new List<string>() {
        "London",
        "Berlin",
        "Paris",
    };
    
    string text = "New York";
    string Text { get => text; set { text = value; Invoke(StateHasChanged); }  }

    string selectedItem = null;
    string SelectedItem { get => selectedItem; set { selectedItem = value; Invoke(StateHasChanged); }  }

    bool dropDownVisible = true;
    bool DropDownVisible { get => dropDownVisible; set { dropDownVisible = value; Invoke(StateHasChanged); }  }
}
