@using System.Collections;
@using Demo.Blazor.Model;
@using Demo.Blazor.Services;
@inject ProductService ProductService;

<div class="demo-description">
    <h2>
        TreeView - Master-Detail Data Binding<span class="badge badge-success demo-badge">New</span>
    </h2>
    <p>The DevExpress TreeView for Blazor allows you to load data from several data sources and display the master-detail relationships within the component.</p>
    <p>This demo module binds the TreeView to three data sources and populates component nodes as follows:</p>
    <ul>
        <li>First-level nodes are bound to an array of <i>ProductCategoryMain</i> items via the component's <b>Data</b> property.</li>
        <li>Second-level nodes are obtained from the second data source. Each node is represented by the <i>ProductCategory</i> object and depends on a parent value (the corresponding first-level node).</li>
        <li>Third-level nodes are obtained from the third data source. Each node is represented by the <i>Product</i> object based on a master-detail relationship between the second and third data sources. This relationship is established through the <i>ProductCategory.ProductSubcategoryID</i> and <i>Product.ProductCategoryId</i> properties.</li>
    </ul>
</div>
<div class="card demo-card">
    <div class="card-body">
        <DxTreeView CssClass="mw-480" Data=@Enum.GetValues(typeof(ProductCategoryMain)) ExpandButtonIconCssClass="oi oi-chevron-right" CollapseButtonIconCssClass="oi oi-chevron-bottom"
            TextExpression=@(dataItem => GetNodeText(dataItem))
            ChildrenExpression=@(dataItem => GetNodeChildren(dataItem))>
        </DxTreeView>
    </div>
</div>
<CodeSnippet_TreeView_MasterDetailDataBinding></CodeSnippet_TreeView_MasterDetailDataBinding>

@code {
    IQueryable<Product> products;
    IEnumerable<ProductCategory> productSubcategories;

    protected override async Task OnInitAsync() {
        products = await ProductService.Load();
        productSubcategories = await ProductService.LoadNestedDataSource();
    }

    IEnumerable GetNodeChildren(object nodeDataObject) {
        if (nodeDataObject is ProductCategoryMain) {
            return productSubcategories
                .Where(c => c.Category.Equals((ProductCategoryMain)nodeDataObject));
        }
        else if (nodeDataObject is ProductCategory) {
            return products
                .Where(p => p.ProductCategoryId == ((ProductCategory)nodeDataObject).ProductSubcategoryID);
        }
        return null;
    }

    string GetNodeText(object dataItem) {
        if (dataItem is ProductCategoryMain) {
            return dataItem.ToString();
        }
        else if (dataItem is ProductCategory) {
            return ((ProductCategory)dataItem).Subcategory;
        }
        else if (dataItem is Product) {
            return ((Product)dataItem).ProductName;
        }
        return "";
    }
}