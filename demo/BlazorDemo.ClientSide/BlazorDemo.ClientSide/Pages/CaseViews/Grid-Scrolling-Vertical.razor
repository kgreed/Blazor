@using Demo.Blazor.Model
@using Demo.Blazor.Services
@inject FlatProductService FlatProductService

<div class="demo-description">
    <h2>Data Grid - Vertical Scrolling</h2>
    <p>
        This demo module illustrates how to enable vertical scrolling in the DevExpress Data Grid for Blazor.
    </p>
    <p>
        The grid height is determined by the number of rows displayed within a page. To reduce the grid's height, display the vertical scrollbar using the
        <b>DxDataGrid.VerticalScrollBarMode</b> property, and specify the height of the scrollable area (in pixels) using the <b>DxDataGrid.VerticalScrollableHeight</b> property.
    </p>
    <p>
        The <b>DxDataGrid.VerticalScrollBarMode</b> property accepts the following values:
    </p>
    <ul>
        <li><b>Auto</b> - The scrollbar is automatically shown when the size of the component content exceeds the size of the component itself.</li>
        <li><b>Hidden</b> - The scrollbar is hidden.</li>
        <li><b>Visible</b> - The scrollbar is visible.</li>
    </ul>
</div>

@if (DataSource == null) {
    <p><em>Loading...</em></p>
} else {
    <DxDataGrid Data=@DataSource 
                VerticalScrollBarMode="@ScrollBarMode.Auto"
                VerticalScrollableHeight="300"
                PageSize="30"
                ShowFilterRow="@false">

        <DxDataGridColumn Field=@nameof(ProductFlat.Id) Caption="Id" Width="50px">
        </DxDataGridColumn>

        <DxDataGridColumn Field=@nameof(ProductFlat.ProductName) Caption="Product Name">
        </DxDataGridColumn>

        <DxDataGridColumn Field=@nameof(ProductFlat.Availability ) Caption="Availability" Width="85px">
            <DisplayTemplate>
                @{
                    var id = Guid.NewGuid().ToString();
                    var inStock = (context as ProductFlat).Availability;
                    <input id=@id type="checkbox" checked=@inStock disabled readonly />
                    if (inStock) {
                        <label class="form-check-label text-success" for=@id><span>In stock</span></label>
                    } else {
                        <label class="form-check-label text-danger" for=@id><span>Sold out</span></label>
                    }
                }
            </DisplayTemplate>
        </DxDataGridColumn>

        <DxDataGridColumn Field=@nameof(ProductFlat.Category) Caption="Category"></DxDataGridColumn>
        <DxDataGridColumn Field=@nameof(ProductFlat.Subcategory) Caption="Subcategory"></DxDataGridColumn>
        <DxDataGridDateEditColumn Field=@nameof(ProductFlat.LastUpdatedDate) Caption="Last Updated Date"></DxDataGridDateEditColumn>

    </DxDataGrid>
    <div class="code-snippet card demo-card-wide">
        <CodeSnippetHeader></CodeSnippetHeader>
        <div class="card-footer text-muted ">
            <CodeSnippet_Grid_Scrolling_Vertical></CodeSnippet_Grid_Scrolling_Vertical>
        </div>
    </div>
}

@code {
    IQueryable<ProductFlat> DataSource;

    protected override async Task OnInitAsync()
    {
        DataSource = await FlatProductService.Load();
    }
}